#!/usr/bin/env bun
// @bun
var DJ=Object.defineProperty;var t=(J,X)=>{for(var Q in X)DJ(J,Q,{get:X[Q],enumerable:!0,configurable:!0,set:($)=>X[Q]=()=>$})};var S=(J,X)=>()=>(J&&(X=J(J=0)),X);class f{minLevel;colors;showTimestamp;name;constructor(J){let{level:X="INFO",colors:Q=!0,timestamp:$=!0,name:K}=J??{};this.minLevel=X,this.showTimestamp=$,this.name=K;let H=typeof process!=="undefined"&&!!process.env.NO_COLOR,z=typeof process!=="undefined"&&!!process.stdout&&!!process.stdout.isTTY;this.colors=Q&&!H&&z}shouldLog(J){return T[J]>=0&&T[J]>=T[this.minLevel]&&T[this.minLevel]<T.NONE}levelMeta(J){switch(J){case"DEBUG":return{tag:"DEBUG",color:E.debug,emoji:"\uD83D\uDC1B"};case"INFO":return{tag:"INFO",color:E.info,emoji:"ℹ️"};case"WARN":return{tag:"WARN",color:E.warn,emoji:"⚠️"};case"ERROR":return{tag:"ERROR",color:E.error,emoji:"❌"}}}timestamp(){if(!this.showTimestamp)return"";return new Date().toISOString()}padLevelTag(J){return J.padEnd(5," ")}colorize(J,X){if(!this.colors||!X)return J;return`${X}${J}${E.reset}`}format(J,X){let Q=this.levelMeta(J),$=this.timestamp(),K=this.name?`[${this.name}] `:"",H=`[ ${this.padLevelTag(Q.tag)} ]`,z=Q.emoji;if(this.colors){let W=this.colorize(H,Q.color),j=this.colorize($?`${$} `:"",E.gray),q=this.colorize(K,E.dim);return`${j}${q}${W} ${z} ${X}`}return`${$?`${$} `:""}${K}${H} ${z} ${X}`}write(J,X){if(!this.shouldLog(J))return;let Q=this.format(J,X);switch(J){case"DEBUG":return console.debug?console.debug(Q):console.log(Q);case"INFO":return console.info?console.info(Q):console.log(Q);case"WARN":return console.warn?console.warn(Q):console.log(Q);case"ERROR":return console.error?console.error(Q):console.log(Q)}}debug(J){this.write("DEBUG",J)}info(J){this.write("INFO",J)}warn(J){this.write("WARN",J)}error(J){this.write("ERROR",J)}child(J){return new f({level:this.minLevel,colors:this.colors,timestamp:this.showTimestamp,name:J})}setLevel(J){this.minLevel=J}}var T,E;var VJ=S(()=>{T={DEBUG:0,INFO:1,WARN:2,ERROR:3,NONE:4},E={reset:"\x1B[0m",bold:"\x1B[1m",dim:"\x1B[2m",debug:"\x1B[36m",info:"\x1B[32m",warn:"\x1B[33m",error:"\x1B[31m",gray:"\x1B[90m"}});var BJ={};t(BJ,{sleep:()=>uJ,saveTopConfig:()=>CJ,saveCollectionConfig:()=>IJ,loadTopConfig:()=>l,loadCollectionConfig:()=>hJ,getCollectionTopConfig:()=>mJ,getCollectionFilesBase:()=>o,ensureConfigDirs:()=>qJ,ensureConfigDir:()=>YJ,TOP_CONFIG_FILE:()=>R});import _ from"node:fs/promises";import{existsSync as p}from"node:fs";import O from"node:path";async function YJ(J){if(Z.debug(`Ensuring config dir: ${J}`),!p(J))Z.warn(`Dir (${J}) does not exist, creating...`),await _.mkdir(J,{recursive:!0})}async function qJ(J){let X=J.collections;console.debug(`Ensuring config dir for ${X.length} collection(s)`);for(let Q of X){let $=Q.configDir;if(Z.debug(`Ensuring config dir: ${$}`),!p($))Z.warn(`Dir (${$}) does not exist, creating...`),await _.mkdir($,{recursive:!0})}}async function l(){if(Z.debug(`Loading top config from: ${R}`),!p(R))return Z.warn("Top config file not found"),null;let J=await _.readFile(R,"utf8");return JSON.parse(J)}async function CJ(J){Z.debug("Saving top config"),await qJ(J),await _.writeFile(R,`${JSON.stringify(J,null,2)}
`,"utf8")}async function o(J){Z.debug("Getting Collection file base");let X=await l(),Q=X.collections.find((K)=>K.id===J).configDir;if(!X||!X.collections)return Z.warn(`No Top config found for ${J}, returning default`),{pagesFile:O.join(Q,`${J}.pages.json`),configFile:O.join(Q,`${J}.config.json`),saveDir:"docs",configDir:Q};let $=X.collections.find((K)=>K.id===J);if(!$)return Z.warn(`Collection config for ${J} not found, returning default paths`),{pagesFile:O.join(Q,`${J}.pages.json`),configFile:O.join(Q,`${J}.config.json`),saveDir:"docs",configDir:".config"};return{pagesFile:$.pagesFile||O.join(Q,`${J}.pages.json`),configFile:$.configFile||O.join(Q,`${J}.config.json`),saveDir:$.saveDir||"docs",configDir:$.configDir||".config"}}async function hJ(J){Z.debug(`Loading collection config for ${J}`);let{configFile:X}=await o(J);if(!p(X))return Z.warn(`Collection config file for ${J} not found`),null;let Q=await _.readFile(X,"utf8");return JSON.parse(Q)}async function mJ(J){Z.debug(`Getting Top Collection Config for ${J}`);let X=await l();if(!X||!X.collections)return Z.debug(`No Top Config found for ${J}`),null;return X.collections.find((Q)=>Q.id===J)||null}async function IJ(J){Z.debug(`Saving Collection config for ${J.collectionId}`);let{configFile:X,configDir:Q}=await o(J.collectionId);await YJ(Q),await _.writeFile(X,`${JSON.stringify(J,null,2)}
`,"utf8")}var R,uJ=(J)=>new Promise((X)=>setTimeout(X,J));var MJ=S(async()=>{await N();R=O.join("outline-sync.json")});import F from"node:fs/promises";import{existsSync as s}from"node:fs";import y from"node:path";async function jJ(J){if(Z.debug(`Ensuring config dir: ${J}`),!s(J))Z.warn(`Dir (${J}) does not exist, creating...`),await F.mkdir(J,{recursive:!0})}async function JJ(J){let X=J.collections;console.debug(`Ensuring config dir for ${X.length} collection(s)`);for(let Q of X){let $=Q.configDir;if(Z.debug(`Ensuring config dir: ${$}`),!s($))Z.warn(`Dir (${$}) does not exist, creating...`),await F.mkdir($,{recursive:!0})}}async function P(){if(Z.debug(`Loading top config from: ${d}`),!s(d))return Z.warn("Top config file not found"),null;let J=await F.readFile(d,"utf8");return JSON.parse(J)}async function QJ(J){Z.debug("Saving top config"),await JJ(J),await F.writeFile(d,`${JSON.stringify(J,null,2)}
`,"utf8")}async function x(J){Z.debug("Getting Collection file base");let X=await P(),Q=X.collections.find((K)=>K.id===J).configDir;if(!X||!X.collections)return Z.warn(`No Top config found for ${J}, returning default`),{pagesFile:y.join(Q,`${J}.pages.json`),configFile:y.join(Q,`${J}.config.json`),saveDir:"docs",configDir:Q};let $=X.collections.find((K)=>K.id===J);if(!$)return Z.warn(`Collection config for ${J} not found, returning default paths`),{pagesFile:y.join(Q,`${J}.pages.json`),configFile:y.join(Q,`${J}.config.json`),saveDir:"docs",configDir:".config"};return{pagesFile:$.pagesFile||y.join(Q,`${J}.pages.json`),configFile:$.configFile||y.join(Q,`${J}.config.json`),saveDir:$.saveDir||"docs",configDir:$.configDir||".config"}}async function UJ(J){Z.debug(`Loading collection config for ${J}`);let{configFile:X}=await x(J);if(!s(X))return Z.warn(`Collection config file for ${J} not found`),null;let Q=await F.readFile(X,"utf8");return JSON.parse(Q)}var d,e=(J)=>new Promise((X)=>setTimeout(X,J));var r=S(async()=>{await N();d=y.join("outline-sync.json")});async function D(J,X,Q=3){let $=`${AJ}/api/${J}`;for(let K=0;K<Q;K++)try{Z.debug(`Outline request: POST ${$} (attempt ${K+1})`),Z.debug(`Payload (trimmed): ${JSON.stringify(X,null,2)}`);let H=await fetch($,{method:"POST",headers:pJ,body:JSON.stringify(X)});if(H.status===429){let W=1000*(K+1);Z.warn(`Rate limited by Outline API. Backing off ${W}ms (attempt ${K+1}).`),await e(W);continue}let z;try{z=await H.json()}catch(W){throw Z.error(`Failed to parse JSON response from ${J}: ${W}`),W}if(!H.ok)throw Z.error(`[Outline@${AJ}/api/${J}] HTTP ${H.status} - payload=${JSON.stringify(X)} response=${JSON.stringify(z)}`),new Error(`Outline API error ${H.status}: ${JSON.stringify(z)}`);return Z.debug(`Outline response for ${J} (attempt ${K+1}): ${JSON.stringify(z).slice(0,200)}${JSON.stringify(z).length>200?"...":""}`),z}catch(H){if(K===Q-1)throw Z.error(`Request to Outline failed after ${Q} attempts: ${H?.message??H}`),H;let z=500*(K+1);Z.warn(`Request failed (attempt ${K+1}): ${H?.message??H}. Retrying after ${z}ms...`),await e(z)}throw new Error("outlineRequest: unreachable")}async function kJ(){let J=[],X=0,Q=100;while(!0){let K=(await D("collections.list",{offset:X,limit:Q})).data||[];for(let H of K)J.push({id:H.id,name:H.name});if(K.length<Q)break;X+=K.length}return Z.debug(`listCollectionsPaged: returned ${J.length} collections`),J}async function wJ(J){let X=[],Q=0,$=100;while(!0){let H=(await D("documents.list",{collectionId:J,offset:Q,limit:$})).data||[];for(let z of H)X.push(z);if(H.length<$)break;Q+=H.length}return Z.debug(`listDocumentsInCollection(${J}): returned ${X.length} documents`),X}async function GJ(J){let X=await D("documents.info",{id:J});return Z.debug(`fetchDocumentInfo(${J}) -> ${X?"ok":"null"}`),X.data??null}async function LJ(J,X,Q,$){let H=await D("documents.create",{title:J,text:X,collectionId:Q,parentDocumentId:$||null,publish:!0});return Z.info(`Created document "${J}" in collection ${Q} (id=${H?.id??"unknown"})`),H.data}async function XJ(J,X,Q){let $={id:J,text:Q,publish:!0};if(X)$.title=X;let K=await D("documents.update",$);return Z.info(`Updated document id=${J}${X?` title="${X}"`:""}`),K.data}var AJ,fJ,pJ;var ZJ=S(async()=>{await r();await N();AJ=process.env.OUTLINE_BASE_URL||"https://app.getoutline.com",fJ=process.env.OUTLINE_API_KEY||"",pJ={Authorization:`Bearer ${fJ}`,"Content-Type":"application/json"}});import a from"node:fs/promises";import{existsSync as dJ}from"node:fs";import u from"node:path";import{spawnSync as sJ}from"node:child_process";function $J(J){return J.replace(/\s+/g,"")}function C(J){return J.toString().normalize("NFKD").replace(/\p{M}/gu,"").toLowerCase().replace(/[^a-z0-9]+/g,"-").replace(/(^-|-$)+/g,"").slice(0,120)}function rJ(J){try{let X=u.resolve(J),Q=sJ("git",["log","-1","--format=%ct","--",X],{cwd:process.cwd(),encoding:"utf8"});if(Q.status!==0)return Z.debug(`git log returned non-zero status for ${X}: ${Q.status}`),null;let $=(Q.stdout||"").trim();if(!$)return Z.debug(`git log returned no output for ${X}`),null;let K=Number($);if(Number.isNaN(K))return Z.debug(`git log output not a number for ${X}: "${$}"`),null;return K*1000}catch(X){return Z.debug(`getGitTimestampMs error for ${J}: ${X}`),null}}async function SJ(J){let X=rJ(J);if(X)return Z.debug(`Using git timestamp for ${J}: ${X}`),X;let Q=await a.stat(J);return Z.debug(`Using FS mtime for ${J}: ${Q.mtimeMs}`),Q.mtimeMs}async function g(J,X,Q=!1){if(dJ(J)){let $=`${J}.outline-sync.bak.${Date.now()}`;if(!Q)try{await a.copyFile(J,$),Z.info(`Backed up existing file to ${$}`)}catch(K){Z.warn(`Failed to back up ${J} to ${$}: ${K}`)}else Z.debug(`[dry-run] would backup existing file ${J} -> ${$}`)}else if(!Q)try{await a.mkdir(u.dirname(J),{recursive:!0}),Z.debug(`Ensured directory ${u.dirname(J)}`)}catch($){Z.warn(`Failed to create directory ${u.dirname(J)}: ${$}`)}else Z.debug(`[dry-run] would ensure directory ${u.dirname(J)}`);if(!Q)try{await a.writeFile(J,X,"utf8"),Z.info(`Wrote file ${J} (${X.length} bytes)`)}catch($){throw Z.error(`Failed to write file ${J}: ${$}`),$}else Z.debug(`[dry-run] would write file ${J} (${X.length} bytes)`)}var HJ=S(async()=>{await N()});var EJ={};t(EJ,{question:()=>n,listCollectionsPrompt:()=>gJ,bootstrapCollection:()=>cJ});import c from"node:fs/promises";import{existsSync as aJ}from"node:fs";import b from"node:path";async function gJ(J){let X=await kJ();if(!X.length){Z.warn("No collections found for this API key.");return}if(console.info("Collections:"),X.forEach((q,V)=>console.info(`${V+1}) ${q.id}	${q.name}`)),J.nonInteractive)return;let Q=await n("Select a collection by number (or press Enter to cancel): "),$=Number(Q.trim());if(!$||$<1||$>X.length){Z.warn("Cancelled collection selection.");return}let K=X[$-1];Z.info(`You chose: ${K.name} (${K.id})`),await JJ(await P()||{collections:[]});let H=await P()||{collections:[]},z=H.collections.find((q)=>q.id===K.id),W=(await n("Enter a base folder path for the collections config files (or press enter for default `.config`): ")).replaceAll(`
`,"");if(W.trim().length<=1)W=".config",Z.debug("Using default configDir `.config`");let j=(await n("Enter a base folder path for the collections markdown files (or press enter for default `docs`): ")).replaceAll(`
`,"");if(j.trim().length<=1)j="docs",Z.debug("Using default saveDir `docs`");if(!z)H.collections.unshift({id:K.id,name:K.name,configDir:W,saveDir:j,pagesFile:b.join(W,`${K.id}.pages.json`),configFile:b.join(W,`${K.id}.config.json`)}),await QJ(H),Z.info(`Added collection to ${b.join("configs","outline-sync.json")}`);else Z.warn("Collection already configured.")}function n(J){return new Promise((X)=>{process.stdout.write(J),process.stdin.resume(),process.stdin.setEncoding("utf8"),process.stdin.once("data",(Q)=>{process.stdin.pause(),X(Q.toString())})})}async function cJ(J){let{collectionId:X,dryRun:Q=!1}=J;Z.info(`Bootstrapping collection ${X} (dryRun=${Q})...`);let $=await wJ(X);Z.info(`Fetched ${$.length} documents from Outline.`),Z.debug(`First 3 documents: ${JSON.stringify($.slice(0,3),null,2)}`);let K=new Map;for(let Y of $)K.set(Y.id,{title:Y.title,file:"",id:Y.id,children:[],raw:Y});let H=[];for(let Y of K.values()){let w=Y.raw||{},G=w.parentDocumentId??w.parentId??null;if(G&&K.has(G))K.get(G).children.push(Y);else H.push(Y)}Z.debug(`Built document tree with ${H.length} root(s)`);let{saveDir:z}=await x(X);function W(Y,w){let G=C(Y.title||"untitled"),zJ=b.join(w,G),FJ=b.join(zJ,"README.md");if(Y.file=FJ,Y.children?.length)for(let PJ of Y.children)W(PJ,zJ)}for(let Y of H)W(Y,z);for(let Y of K.values()){let w=Y.file,G=Y.raw?.text??`# ${Y.title}

`;if(!Q)await c.mkdir(b.dirname(w),{recursive:!0}),await c.writeFile(w,G,"utf8"),Z.debug(`Wrote file: ${w}`);else Z.debug(`[dry-run] would write ${w} (${G.length} bytes)`)}function j(Y){return{title:Y.title,file:Y.file,id:Y.id,children:(Y.children||[]).map(j)}}let q={collectionId:X,pages:H.map(j)},{pagesFile:V,configFile:B,saveDir:L,configDir:U}=await x(X);if(Z.debug(`Collection (${X}) files: pagesFile=${V}, configFile=${B}, saveDir=${L}, configDir=${U}`),await jJ(U),!Q){if(await c.writeFile(V,`${JSON.stringify(q,null,2)}
`,"utf8"),Z.info(`Saved manifest: ${V}`),!aJ(B))await c.writeFile(B,`${JSON.stringify({collectionId:X,saveDir:L,mappings:[]},null,2)}
`,"utf8"),Z.info(`Created new config: ${B}`);Z.info(`Saved config: ${B}`);let Y=await P()||{collections:[]};if(!Y.collections.find((G)=>G.id===X))Y.collections.unshift({id:X,saveDir:L,pagesFile:V,configFile:B}),await QJ(Y),Z.debug(`Updated top config with collection ${X}`)}else Z.debug(`[dry-run] would save pages to ${V} and config to ${B}`);Z.info("Bootstrap complete")}var OJ=S(async()=>{await ZJ();await r();await HJ();await N()});var bJ={};t(bJ,{syncPage:()=>KJ,runSync:()=>nJ,persistPagesManifest:()=>xJ,loadPagesManifest:()=>yJ,contentsEqualIgnoringWhitespace:()=>h,applyMappingsToManifest:()=>_J});import m from"node:fs/promises";import{existsSync as NJ}from"node:fs";import M from"node:path";async function yJ(J){let{pagesFile:X}=await x(J);if(!NJ(X))throw Z.error(`${X} not found. Run init/setup to create it`),new Error(`${X} not found. Run init/setup to create it`);let Q=await m.readFile(X,"utf8");return Z.debug(`Loaded pages manifest from ${X} (${Q.length} bytes)`),JSON.parse(Q)}async function xJ(J,X,Q=!1){let{pagesFile:$}=await x(J);if(Q){Z.debug(`[dry-run] would persist manifest to ${$}`);return}await m.writeFile($,`${JSON.stringify(X,null,2)}
`,"utf8"),Z.info(`Persisted manifest to ${$}`)}function _J(J,X){let Q=X?.mappings||[];function $(H){if(!H)return!1;if(H.endsWith("/")||H.endsWith(M.sep))return!0;return M.extname(H).toLowerCase()!==".md"}function K(H,z){let W=!1;for(let q of Q)if(q.match?.id&&H.id===q.match.id){let V=q.path;if($(V)){let B=V.endsWith("/")?V:V;H.file=M.join(B,"README.md")}else H.file=V;W=!0,Z.debug(`Mapping applied by id for "${H.title}" -> ${H.file}`);break}if(!W){for(let q of Q)if(q.match?.title&&H.title===q.match.title){let V=q.path;if($(V)){let B=V.endsWith("/")?V:V;H.file=M.join(B,"README.md")}else H.file=V;W=!0,Z.debug(`Mapping applied by title for "${H.title}" -> ${H.file}`);break}}if(!H.file){let q=C(H.title||"untitled"),V=z?M.join(z,q):M.join(X?.saveDir||"docs",q);H.file=M.join(V,"README.md"),Z.debug(`Inherited path for "${H.title}" -> ${H.file}`)}else if(!(M.dirname(H.file)&&M.dirname(H.file)!==".")){let V=z||X?.saveDir||"docs";H.file=M.join(V,H.file),Z.debug(`Normalized bare filename for "${H.title}" -> ${H.file}`)}else Z.debug(`Using mapped path for "${H.title}" -> ${H.file}`);let j=M.dirname(H.file);if(H.children?.length)for(let q of H.children)K(q,j)}for(let H of J.pages)K(H,null);return Z.debug(`Applied mappings to manifest (rules=${Q.length})`),J}function h(J,X){return $J(J)===$J(X)}async function KJ(J,X,Q,$,K){let H=Q.file,z=M.resolve(H),W=NJ(z),j=0;if(W)try{j=await SJ(z)}catch(U){Z.warn(`Failed to get local timestamp for ${z}: ${U}`),j=0}let q=null;if(Q.id)try{q=await GJ(Q.id)}catch(U){Z.warn(`Failed to fetch remote info for ${Q.title} (${Q.id}): ${U}`),q=null}let V=q?.text??null,B=q?.updatedAt?new Date(q.updatedAt).getTime():0;if(Z.debug(`syncPage("${Q.title}") localExists=${W} localTs=${j} remoteExists=${!!q} remoteUpdatedAt=${B}`),!W){if(K.mode==="pull"||K.mode==="sync"||K.mode==="push"){let U=V!=null?V:`# ${Q.title}

`;await g(z,U,K.dryRun||!1),Z.info(`[INIT] Ensured local file for "${Q.title}" -> ${z}`)}}if(!Q.id){let U=await m.readFile(z,"utf8");if(K.dryRun)Z.info(`[dry-run][CREATE] Would create remote doc for "${Q.title}" in collection ${J}`);else try{let Y=await LJ(Q.title,U,J,$);Q.id=Y?.id??Q.id,Z.info(`[CREATE] Created remote "${Q.title}" id=${Q.id}`)}catch(Y){Z.error(`[CREATE] Failed to create remote for ${Q.title}: ${Y}`)}}else{let U=await m.readFile(z,"utf8");if(K.mode==="pull")if(V!=null&&!h(U,V))Z.info(`[PULL] Remote applied to local for "${Q.title}"`),await g(z,V??"",K.dryRun||!1);else Z.debug(`[SKIP] No change (pull) for "${Q.title}"`);else if(K.mode==="push")if(V==null||!h(U,V))if(K.dryRun)Z.info(`[dry-run][PUSH] Would update remote "${Q.title}" id=${Q.id}`);else try{await XJ(Q.id,Q.title,U),Z.info(`[PUSH] Updated remote "${Q.title}" id=${Q.id}`)}catch(Y){Z.error(`[PUSH] Failed to update remote for ${Q.title}: ${Y}`)}else Z.debug(`[SKIP] No change (push) for "${Q.title}"`);else if(B>j+500)if(!h(U,V??""))Z.info(`[PULL] Remote newer -> overwrite local for "${Q.title}"`),await g(z,V??"",K.dryRun||!1);else Z.debug(`[SKIP] equal after normalizing (remote newer timestamp but content same) "${Q.title}"`);else if(j>B+500)if(!h(U,V??""))if(Z.info(`[PUSH] Local newer -> update remote for "${Q.title}"`),K.dryRun)Z.info(`[dry-run] would update remote ${Q.title}`);else try{await XJ(Q.id,Q.title,U),Z.info(`[PUSH] Updated remote "${Q.title}" id=${Q.id}`)}catch(Y){Z.error(`[PUSH] Failed to update remote for ${Q.title}: ${Y}`)}else Z.debug(`[SKIP] equal after normalizing (local newer timestamp but content same) "${Q.title}"`);else Z.debug(`[SKIP] No changes for "${Q.title}"`)}let L=Q.id||$;if(Q.children?.length)for(let U of Q.children)await KJ(J,X,U,L,K)}async function nJ(J){let{collectionId:X,mode:Q,dryRun:$=!1}=J;Z.info(`Starting ${Q} for collection ${X} (dryRun=${$})`);let K=await yJ(X),H=await UJ(X)||{saveDir:"docs",mappings:[]};_J(K,H);async function z(W,j){if(!W.file){let B=C(W.title||"untitled"),L=j?M.join(j,B):M.join(H.saveDir||"docs",B);W.file=M.join(L,"README.md")}else{let B=M.dirname(W.file);if(!B||B==="."){let L=j||H.saveDir||"docs";W.file=M.join(L,W.file)}}let q=M.dirname(W.file);if(!$)try{await m.mkdir(q,{recursive:!0}),Z.debug(`Ensured directory ${q}`)}catch(B){Z.warn(`Failed to ensure directory ${q}: ${B}`)}else Z.debug(`[dry-run] would ensure directory ${q}`);let V=M.dirname(W.file);if(W.children?.length)for(let B of W.children)await z(B,V)}for(let W of K.pages)await z(W,null);Z.debug("Completed path normalization for manifest");for(let W of K.pages)await KJ(X,K,W,null,{mode:Q,dryRun:$});await xJ(X,K,$),Z.info("Done.")}var vJ=S(async()=>{await r();await HJ();await ZJ();await N()});var WJ,RJ=!1,A,v,Z,iJ,TJ,tJ,lJ,k,I,i;var N=S(async()=>{VJ();WJ=process.argv.slice(2),A={},v=[];for(let J=0;J<WJ.length;J++){let X=WJ[J];if(X==="--help"||X==="-h")v.push("--help");else if(X==="--verbose")v.push("--verbose");else if(X.startsWith("--collection=")||X.startsWith("--collection:")){let Q=X.split(/[:=]/)[1]||"";if(!A.collection)A.collection=[];A.collection.push(Q)}else if(X==="--collection"){let Q=WJ[J+1];if(Q&&!Q.startsWith("--")){if(!A.collection)A.collection=[];A.collection.push(Q),J++}}else if(X.startsWith("--")){let[Q,$]=X.replace(/^--/,"").split("=");A[Q]=$===void 0?!0:$}else v.push(X)}if(A["api-key"])process.env.OUTLINE_API_KEY=String(A["api-key"]);if(A["base-url"])process.env.OUTLINE_BASE_URL=String(A["base-url"]);if(v.includes("--verbose"))RJ=!0;Z=new f({level:RJ?"DEBUG":"INFO"});if(v.includes("--help")||A.help||A.h)console.log(`
Usage:
  OUTLINE_API_KEY=... bun run bin/cli.ts [command] [--collection=ID]... [--dry-run] [--api-key="..."]

Commands:
  setup                    - interactive setup: list collections, choose one
  list-collections         - print collections
  init --collection=ID     - bootstrap pages.json + markdown (repeatable)
  pull --collection=ID     - pull remote changes (repeatable)
  push --collection=ID     - push local changes (repeatable)
  sync --collection=ID     - bidirectional sync (repeatable)

Flags:
  --collection=ID          Repeatable; run command against multiple collections
  --api-key="..."          Provide Outline API key (overrides env var)
  --base-url="..."         Provide Outline base URL (overrides env var)
  --dry-run                Preview only
  --help, -h
Examples:
  OUTLINE_API_KEY=... bunx @dockstat/outline-sync --collection="id1" --collection="id2" sync --dry-run
  bun run bin/cli.ts sync --api-key="sk_xxx" --collection="id1"
`),process.exit(0);({loadTopConfig:iJ}=await MJ().then(() => BJ)),{listCollectionsPrompt:TJ,bootstrapCollection:tJ}=await OJ().then(() => EJ),{runSync:lJ}=await vJ().then(() => bJ);Z.debug("Parsing positionals");k=v[0]||"sync",I=Boolean(A["dry-run"]),i=A.collection??[];Z.debug(`Parsed cmd=${k} DRY_RUN=${I} collectionsFromCli=${i}`);try{Z.debug("Loading top config");let J=await iJ()||{collections:[]};Z.debug(`Loaded: ${JSON.stringify(J)}`);let X=()=>{if(Z.debug("Resolving targets"),i.length>0)return Z.debug(`Found Collection from cli: ${JSON.stringify(i)}`),i;if(J.collections&&J.collections.length>0)return Z.debug(`Found collections in Top Config: ${JSON.stringify(J)}`),J.collections.map((Q)=>Q.id);return Z.warn("Couldn't resolve targets"),[]};if(k==="list-collections")Z.debug("Listing collections"),await TJ({dryRun:I,nonInteractive:!1}),process.exit(0);if(k==="setup")Z.debug("Running setup"),await TJ({dryRun:I,nonInteractive:!1}),process.exit(0);if(k==="init"){Z.debug("Running init");let Q=X();if(!Q.length)throw new Error("Init requires at least one collection. Provide --collection or run setup.");for(let $ of Q)await tJ({collectionId:$,dryRun:I});process.exit(0)}if(k==="pull"||k==="push"||k==="sync"){Z.debug("Parsing CMD (pull/push/sync)");let Q=X();if(!Q.length)throw new Error(`Command "${k}" requires at least one collection id. Provide with --collection=ID or run setup.`);let $=k==="pull"?"pull":k==="push"?"push":"sync";for(let K of Q)await lJ({collectionId:K,mode:$,dryRun:I});process.exit(0)}Z.error(`Unknown command: ${k}`),process.exit(1)}catch(J){console.error("ERROR:",J?.message||J),process.exit(1)}});await N();export{Z as logger};

//# debugId=C9F1296C2DE7230364756E2164756E21
//# sourceMappingURL=data:application/json;base64,
